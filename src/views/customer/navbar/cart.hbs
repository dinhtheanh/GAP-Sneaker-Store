<link href="/customer/css/cart.css" rel="stylesheet">
<link href="/customer/css/style.css" rel="stylesheet">

<div>
	
	<div id = "page">
		<main class="bg_gray">
			<div class="container margin_30">
			<div class="page_header">
				<div class="breadcrumbs">
					<ul>
						<li><a href="#">Home</a></li>
						<li><a href="#">Category</a></li>
						<li>Page active</li>
					</ul>
				</div>
				<h1>Cart page</h1>
			</div>
			<!-- /page_header -->
			<table class="table table-striped cart-list">
								<thead>
									<tr>
										<th>
											Product
										</th>
										<th>
											Price
										</th>
										<th>
											Quantity
										</th>
										<th>
											Subtotal
										</th>
										<th>
											
										</th>
									</tr>
								</thead>
								<tbody>
									{{#each products}}
									
										{{!-- Tăng giá trên mỗi vòng lặp --}}
									
										
									
									<tr>
										<td>
											<div class="thumb_cart">
												<img src={{this.product.img.[0]}} class="lazy" alt="Image">
											</div>
											<span class="item_cart">{{this.product.name}}</span>
										</td>
										<td>
											<strong>{{this.product.price}}</strong>
										</td>
										<td>
											<strong>{{this.quantity}}</strong>

										</td>
										<td>
											<strong>{{calcprice this.product.price this.quantity}}</strong>
										</td>
										<td class="options">
											<button onclick="deleteProduct(this)" value={{this.product._id}}><i class="ti-trash"></i></button>
										</td>
									</tr>
										
									{{/each}}
									
									
								</tbody>
							</table>

							<div class="row add_top_30 flex-sm-row-reverse cart_actions">
							<div class="col-sm-4 text-end">
								<select class="form-select" aria-label="Default select example" id="shipping-method" onchange="updateShipping(this)">
									<option value="0">Select a shipping optine</option>
									<option value="2">Standart</option>
									<option value="4">Express</option>
									<option value="10">Next day</option>
								</select>
							</div>
								<div class="col-sm-8">
								<div class="apply-coupon">
									<div class="form-group">
										<div class="row g-2">
											<div class="col-md-6"><input type="text" name="coupon-code" value="" placeholder="Promo code" class="form-control"></div>
											<div class="col-md-4"><button type="button" class="btn_1 outline">Apply Coupon</button></div>
										</div>
									</div>
								</div>
							</div>
						</div>
						<!-- /cart_actions -->
		
			</div>
			<!-- /container -->
			
			<div class="box_cart">
				<div class="container">
				<div class="row justify-content-end">
					<div class="col-xl-4 col-lg-4 col-md-6">
				<ul>
					<li id = "subtotal" value = {{calculateTotal products}} >
						<span>Subtotal</span> ${{calculateTotal products}}
					</li>

					<li>
						<span>Shipping</span>  $<a id ="shipping-price">0.0</a>
					</li>
					<li >
						<span>Total</span>$ <a id = "total-pay"></a>
						
					</li>
				</ul>
				<button value="{{stringify products}}" onclick="checkout(this)" class="btn_1 full-width cart">Proceed to Checkout</a>
						</div>
					</div>
				</div>
			</div>
			<!-- /box_cart -->
		</main>
	</div>
</div>
<style>
  .form-select {
    font-weight: bold;
  }
</style>

<script>
		
  // Hàm cập nhật tổng giá
  		function updateShipping(e) {
            const shippingMethod = e.value
			var subtotalElement = document.getElementById('subtotal');
			var subtotalValue = parseFloat(subtotalElement.getAttribute('value'));
			const totalValue = parseFloat(shippingMethod) + subtotalValue;



            document.getElementById('shipping-price').textContent = parseFloat(shippingMethod).toFixed(1);
            document.getElementById('total-pay').textContent = totalValue.toFixed(1);
			

			
          
        }
		function deleteProduct(e) {
			const productId = e.value;

			fetch('cart/deleteProduct', {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify({ data: productId }) // Corrected the data structure
			})
			.then(res => res.json())
			.then(data => {
				if (data.message) {
					alert(data.message);
					window.location.reload();
				} else if (data.error) {
					alert(data.error);
				}
			})
			.catch((error) => {
				console.error('Error during API call:', error);
				// Display a generic error message
				alert('An error occurred during the deleting product process.');
			});
		}
			
          
		function checkout(e) {
            const shippingMethod = parseFloat(document.getElementById('shipping-method').value);
			var subtotalElement = document.getElementById('subtotal');
			var subtotalValue = parseFloat(subtotalElement.getAttribute('value'));


			const totalValue = parseFloat(shippingMethod) + subtotalValue;

			if (subtotalValue === 0) {
        	// Hiển thị thông báo
        		alert('Your cart is empty.');
    		}
			else if(shippingMethod === 0) 
			{
        		alert('Please select shipping method.');

			}
			else {
				
        		var data = {
					shippingMethod: shippingMethod,
					subtotalValue: subtotalValue,
					totalValue: totalValue,
					products: JSON.parse(e.value) // Sử dụng biến products được truyền từ server
					// Thêm các trường dữ liệu khác cần thiết
				}
				fetch('cart/submitCheckout',{
					method: 'POST',
					headers: { 'Content-Type': 'application/json' },
					body: JSON.stringify(data)
				})
				.then(res => res.json())
				.then(data => {
					if(data.message)
					{
						window.location.href= '/confirm';
					}
					else if (data.error)
					{
						alert(data.error)
					}
				})
				.catch((error)=>{
					 console.error('Error during API call:', error);
           		 	// Display a generic error message
           			 alert('An error occurred during the checkout process.');
				});
    		}
          
        }
</script>