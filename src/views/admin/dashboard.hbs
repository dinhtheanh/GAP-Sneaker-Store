<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js"></script>
<div class="container-xxl flex-grow-1 container-p-y">
    <h4 class="fw-bold py-3 mb-4">Dashboard</h4>
    <div class="col-12 mb-3"></div>
    <div class="row">
        <div class="col-xl-9">
            <div class="card">
                <h5 class="card-header">Revenue Report</h5>
                <div class="card-body">
                    <canvas id="revenueChart"></canvas> <!-- Canvas for Revenue Chart -->
                </div>
            </div>
        </div>
        <div class="col-xl-3">
            <div class="card mb-4">
                <h5 class="card-header">Select time range</h5>
                <!-- Checkboxes and Radios -->
                <div class="card-body">
                    <div class="mb-3">
                        <select id="timerange" class="form-select">
                            <option value="7day">Last 7 days</option>
                            <option value="4week">Last 4 weeks</option>
                            <option value="3month">Last 3 months</option>
                        </select>
                    </div>
                </div>
                <!-- Inline Checkboxes -->
            </div>
        </div>
    </div>
    <br class="mb-3">
    <div class="row">
        <div class="col-xl-9">
            <div class="card">
                <h5 class="card-header">Revenue Report By Products</h5>
                <div class="card-body">
                    <canvas id="productRevenueChart"></canvas> <!-- Canvas for Product Revenue Chart -->
                </div>
            </div>
        </div>
        <div class="col-xl-3">
            <div class="card mb-4">
                <h5 class="card-header">Select time range</h5>
                <!-- Checkboxes and Radios -->
                <div class="card-body">
                    <div class="mb-3">
                        <select id="timerangebyproduct" class="form-select">
                            <option value="7day">Last 7 days</option>
                            <option value="4week">Last 4 weeks</option>
                            <option value="3month">Last 3 months</option>
                        </select>
                    </div>
                </div>
                <!-- Inline Checkboxes -->
            </div>
        </div>
    </div>
    <script src="https://unpkg.com/handlebars@latest/dist/handlebars.min.js"></script>
    <script>
        let timeRangeForRevenue = '7day';
        let timeRangeForProductRevenue = '7day';
        let labelsForRevenue = [];
        let timestamps = [];
        let timestampsForProduct = [];
        let dataForRevenue = [];
        const setLabelForRevenue = (timeRange) => {
            timestamps = [];
            labelsForRevenue = [];
            if (timeRange === '7day') {
                const currentDate = new Date();
                const labels = [];
                for (let i = 0; i < 7; i++) {
                    const dayCount = i;
                    const date = new Date(currentDate.getTime() - dayCount * 24 * 60 * 60 * 1000);
                    const month = date.toLocaleString('default', { month: 'long' });
                    const day = date.getDate();
                    const label = `${month} ${day}`;
                    labels.push(label);
                    timestamps.push(date.getTime());
                }
                console.log(labels);
                timestamps.reverse();
                labelsForRevenue = labels.reverse();
            } else if (timeRange === '4week') {
                const currentDate = new Date();
                const labels = [];
                for (let i = 0; i < 4; i++) {
                    const dayCount = i * 7;
                    const date = new Date(currentDate.getTime() - dayCount * 24 * 60 * 60 * 1000);
                    const month = date.toLocaleString('default', { month: 'long' });
                    const day = date.getDate();
                    const label = `${month} ${day}`;
                    labels.push(label);
                    timestamps.push(date.getTime());
                }
                console.log(labels);
                timestamps.reverse();
                labelsForRevenue = labels.reverse();

            } else if (timeRange === '3month') {
                const currentDate = new Date();
                const labels = [];
                for (let i = 0; i < 3; i++) {
                    const monthCount = i;
                    const date = new Date(currentDate.getFullYear(), currentDate.getMonth() - monthCount, 1);
                    const month = date.toLocaleString('default', { month: 'long' });
                    const label = `${month} ${date.getDate()}`;
                    labels.push(label);
                    timestamps.push(date.getTime());
                }
                console.log(labels);
                timestamps.reverse();
                labelsForRevenue = labels.reverse();
            }
        }

        const setTimestampForRevenueByProduct = (timeRange) => {
            timestampsForProduct = [];
            if (timeRange === '7day') {
                const currentDate = new Date();
                const labels = [];
                for (let i = 0; i < 7; i++) {
                    const dayCount = i;
                    const date = new Date(currentDate.getTime() - dayCount * 24 * 60 * 60 * 1000);
                    const month = date.toLocaleString('default', { month: 'long' });
                    const day = date.getDate();
                    const label = `${month} ${day}`;
                    //labels.push(label);
                    timestampsForProduct.push(date.getTime());
                }
                //console.log(labels);
                timestampsForProduct.reverse();
                
            } else if (timeRange === '4week') {
                const currentDate = new Date();
                const labels = [];
                for (let i = 0; i < 4; i++) {
                    const dayCount = i * 7;
                    const date = new Date(currentDate.getTime() - dayCount * 24 * 60 * 60 * 1000);
                    const month = date.toLocaleString('default', { month: 'long' });
                    const day = date.getDate();
                    const label = `${month} ${day}`;
                    timestampsForProduct.push(date.getTime());
                }
                timestampsForProduct.reverse();

            } else if (timeRange === '3month') {
                const currentDate = new Date();
                const labels = [];
                for (let i = 0; i < 3; i++) {
                    const monthCount = i;
                    const date = new Date(currentDate.getFullYear(), currentDate.getMonth() - monthCount, 1);
                    const month = date.toLocaleString('default', { month: 'long' });
                    const label = `${month} ${date.getDate()}`;
                    labels.push(label);
                    timestampsForProduct.push(date.getTime());
                }
                console.log(labels);
                timestampsForProduct.reverse();
                
            }
        }

        const timeRangeDoc = document.getElementById('timerange');
        const timeRangeProductDoc = document.getElementById('timerangebyproduct');
        timeRangeDoc.addEventListener('change', (event) => {
            timeRangeForRevenue = event.target.value;
            setLabelForRevenue(timeRangeForRevenue);
            getData(labelsForRevenue, timestamps)
            //console.log(timeRangeForRevenue);
        });
        timeRangeProductDoc.addEventListener('change', (event) => {
            timeRangeForProductRevenue = event.target.value;
            setTimestampForRevenueByProduct(timeRangeForProductRevenue);
            getDataByProduct(timestampsForProduct)
            console.log(timeRangeForProductRevenue);
            console.log(timestampsForProduct);
        });
        const getData = (labels, timestamps) => {

            //console.log(timestamps);
            fetch('/admin/api/revenue-report', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    timestamps: timestamps
                }),
            }).then((response) => response.json()).then(data => {
                //console.log(data);
                //const revenueData = data.result.map(item => item.revenue);
                //console.log(revenueData);
                drawRevenueChart(labels, data.result);
            });
        }

        const getDataByProduct = (timestamps) => {
            //console.log(timestamps);
            fetch('/admin/api/revenue-report-by-product', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    timestamps: timestamps
                }),
            }).then((response) => response.json()).then(data => {
                console.log(data);
                //const revenueData = data.result.map(item => item.revenue);
                //console.log(revenueData);
                const productLabels = Object.keys(data.result)
                const dataToDraw = Object.values(data.result)
                drawRevenueByProductChart(productLabels, dataToDraw);
            });
        }

        const drawRevenueChart = (labels, data) => {
            var revenueChartCtx = document.getElementById('revenueChart').getContext('2d');
            var revenueChartData = {
                labels: labels,
                datasets: [{
                    label: 'Revenue',
                    data: data,
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1
                }]
            };
            var revenueChartOptions = {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            };
            var revenueChart = new Chart(revenueChartCtx, {
                type: 'line',
                data: revenueChartData,
                options: revenueChartOptions
            });
        }


        // Product Revenue Chart
        const drawRevenueByProductChart = (labels, data) => {
            var productRevenueChartCtx = document.getElementById('productRevenueChart').getContext('2d');
            var productRevenueChartData = {
                labels: labels,
                datasets: [{
                    label: 'Revenue',
                    data: data,
                    backgroundColor: 'rgba(54, 162, 235, 0.2)',
                    borderColor: 'rgba(54, 162, 235, 1)',
                    borderWidth: 1
                }]
            };
            var productRevenueChartOptions = {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            };
            var productRevenueChart = new Chart(productRevenueChartCtx, {
                type: 'bar', // Change the chart type to 'bar'
                data: productRevenueChartData,
                options: productRevenueChartOptions
            });
        }

        
    </script>



</div>